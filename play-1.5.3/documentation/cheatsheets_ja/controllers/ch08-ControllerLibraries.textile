h2. Controller - Libraries

*==WS.url("http://s.com/posts").get().toJSON();==*
HTTP GET リクエストを JSON にします。

*==WS.withEncoding("iso-8859-1").url("http://s.com/posts").get().toJSON();==*
HTTP GET リクエストを iso-8859-1 エンコーディングで JSON にします。

*==WS.url("http://s.com/").post().toXML();==*
HTTP POST リクエストを XML にします。

*==DB.execute("raw sql");==*
そのままの SQL を評価します。

*==XML.getDocument(String);==*
文字列を XML にします。

*==XML.serialize(Document);==*
XML を文字列にします。

*==XPath.selectNodes(String xpath, Object node);==*
XPath 表記の評価

*==Files.copy(File,File);==*
ファイルコピー

*==Files.copyDir(File,File);==*
再帰的なディレクトリコピー

*==Files.delete(File);==*
*==Files.deleteDirectory(File);==*
ファイルやディレクトリの削除

*==IO.readLines(File);==*
*==IO.readContentAsString(File);==*
*==IO.readContent(File);==*
*==IO.write(byte[],File);==*
ファイルの内容の読み書き

*==Images.crop(File orig,File to, int x1, int y1, int x2, int y2);==*
*==Images.resize(File orig, File to, int w, int h);==*
*==Images.toBase64(File image);==*
便利なメソッド

*==Crypto.encryptAES(String);==*
*==Crypto.decryptAES(String);==*
アプリケーションの秘密鍵を使っての暗号化

*==Crypto.passwordHash(String);==*
MD5 パスワードハッシュを生成します。

*==Codec.UUID();==*
ユニークな ID を生成します。

*==Codec.byteToHexString(byte[] bytes);==*
バイト配列を 16進数表記の文字列で書き出します。

*==Codec.encodeBASE64(byte[] value);==*
*==Codec.decodeBASE64(String base64);==*
Encode/Decode a base64 value
base64 のエンコードまたはデコードをします。

*==Codec.hexSHA1(String);==*
文字列の 16進数表記の SHA1 ハッシュを生成します。
